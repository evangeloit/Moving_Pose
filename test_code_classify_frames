database = []

for iSubject in range(0, 12):
    for iAction in range(0, 11):
        for iframe in range(0, len(fv_subj[iSubject][iAction])):
            dt = tuple((fv_subj[iSubject][iAction][iframe], iSubject, iAction))
            database.append(dt)

database = np.array(database)

f = incoming frame 

########################################################################
for income frame

def filter_database(testframes[income][2], database):


return data without subject

########################################################################
def classframe(f, database, k):

	f_v_in = compute feature_vector(f)
	
	dist = []
	for iframe in range(0, database.shape[0])
		d= tuple(distance.euclidean(f_v_in, database[iframe][0]),database[iframe][1], database[iframe][2])

		dist.append(d)

	#sort by distance
	sorted(dist, key = getkey)
	
	#pick first k elements
	dist_sort = []
	for elements in range(0,k)
		dist_sort = dist[elements]
		dist_sort.append(dist_sort)

	#find most occurent class, class_freq[1] // most_common returns (label,counts) 
	class_freq = most_common(dist.sublist(0, k)])
	
	#compute Confidence
	confidence = class_freq[1]/k

	return (class_freq[0] ,confidence)


# assign tuple to frame

